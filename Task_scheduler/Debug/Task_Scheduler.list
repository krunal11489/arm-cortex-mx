
Task_Scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000011f0  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08001398  08001398  00011398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001450  08001450  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001450  08001450  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001450  08001450  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001450  08001450  00011450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001454  08001454  00011454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000068  080014c0  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080014c0  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   000028ce  00000000  00000000  00020092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000083d  00000000  00000000  00022960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  000231a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001b8  00000000  00000000  000233a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002d36  00000000  00000000  00023558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ae0  00000000  00000000  0002628e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009d78  00000000  00000000  00027d6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00031ae6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000d54  00000000  00000000  00031b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08001380 	.word	0x08001380

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	08001380 	.word	0x08001380

080001e8 <led_init_all>:
{
  for(uint32_t i = 0 ; i < count ; i++);
}

void led_init_all(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b082      	sub	sp, #8
 80001ec:	af00      	add	r7, sp, #0

	uint32_t *pRccAhb1enr = (uint32_t*)0x40023830;
 80001ee:	4b19      	ldr	r3, [pc, #100]	; (8000254 <led_init_all+0x6c>)
 80001f0:	607b      	str	r3, [r7, #4]
	uint32_t *pGpiodModeReg = (uint32_t*)0x40020C00;
 80001f2:	4b19      	ldr	r3, [pc, #100]	; (8000258 <led_init_all+0x70>)
 80001f4:	603b      	str	r3, [r7, #0]


	*pRccAhb1enr |= ( 1 << 3);
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	f043 0208 	orr.w	r2, r3, #8
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
	//configure LED_GREEN
	*pGpiodModeReg |= ( 1 << (2 * LED_GREEN));
 8000202:	683b      	ldr	r3, [r7, #0]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_ORANGE));
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_RED));
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	601a      	str	r2, [r3, #0]
	*pGpiodModeReg |= ( 1 << (2 * LED_BLUE));
 8000226:	683b      	ldr	r3, [r7, #0]
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	601a      	str	r2, [r3, #0]
	*pGpioOpTypeReg |= ( 1 << (2 * LED_ORANGE));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_RED));
	*pGpioOpTypeReg |= ( 1 << (2 * LED_BLUE));
#endif

    led_off(LED_GREEN);
 8000232:	200c      	movs	r0, #12
 8000234:	f000 f82a 	bl	800028c <led_off>
    led_off(LED_ORANGE);
 8000238:	200d      	movs	r0, #13
 800023a:	f000 f827 	bl	800028c <led_off>
    led_off(LED_RED);
 800023e:	200e      	movs	r0, #14
 8000240:	f000 f824 	bl	800028c <led_off>
    led_off(LED_BLUE);
 8000244:	200f      	movs	r0, #15
 8000246:	f000 f821 	bl	800028c <led_off>



}
 800024a:	bf00      	nop
 800024c:	3708      	adds	r7, #8
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40023830 	.word	0x40023830
 8000258:	40020c00 	.word	0x40020c00

0800025c <led_on>:

void led_on(uint8_t led_no)
{
 800025c:	b480      	push	{r7}
 800025e:	b085      	sub	sp, #20
 8000260:	af00      	add	r7, sp, #0
 8000262:	4603      	mov	r3, r0
 8000264:	71fb      	strb	r3, [r7, #7]
  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000266:	4b08      	ldr	r3, [pc, #32]	; (8000288 <led_on+0x2c>)
 8000268:	60fb      	str	r3, [r7, #12]
  *pGpiodDataReg |= ( 1 << led_no);
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	681b      	ldr	r3, [r3, #0]
 800026e:	79fa      	ldrb	r2, [r7, #7]
 8000270:	2101      	movs	r1, #1
 8000272:	fa01 f202 	lsl.w	r2, r1, r2
 8000276:	431a      	orrs	r2, r3
 8000278:	68fb      	ldr	r3, [r7, #12]
 800027a:	601a      	str	r2, [r3, #0]

}
 800027c:	bf00      	nop
 800027e:	3714      	adds	r7, #20
 8000280:	46bd      	mov	sp, r7
 8000282:	bc80      	pop	{r7}
 8000284:	4770      	bx	lr
 8000286:	bf00      	nop
 8000288:	40020c14 	.word	0x40020c14

0800028c <led_off>:

void led_off(uint8_t led_no)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	4603      	mov	r3, r0
 8000294:	71fb      	strb	r3, [r7, #7]
	  uint32_t *pGpiodDataReg = (uint32_t*)0x40020C14;
 8000296:	4b08      	ldr	r3, [pc, #32]	; (80002b8 <led_off+0x2c>)
 8000298:	60fb      	str	r3, [r7, #12]
	  *pGpiodDataReg &= ~( 1 << led_no);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	79fa      	ldrb	r2, [r7, #7]
 80002a0:	2101      	movs	r1, #1
 80002a2:	fa01 f202 	lsl.w	r2, r1, r2
 80002a6:	43d2      	mvns	r2, r2
 80002a8:	401a      	ands	r2, r3
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]

}
 80002ae:	bf00      	nop
 80002b0:	3714      	adds	r7, #20
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bc80      	pop	{r7}
 80002b6:	4770      	bx	lr
 80002b8:	40020c14 	.word	0x40020c14

080002bc <main>:
}TCB_t;

TCB_t user_tasks[MAX_TASKS];

int main(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
	enable_processor_faults();
 80002c0:	f000 f9ce 	bl	8000660 <enable_processor_faults>

	init_scheduler_stack(SCHED_STACK_START);
 80002c4:	4807      	ldr	r0, [pc, #28]	; (80002e4 <main+0x28>)
 80002c6:	f000 f937 	bl	8000538 <init_scheduler_stack>

	//tasks stack initialization
	init_task_stack();
 80002ca:	f000 f93b 	bl	8000544 <init_task_stack>

	// led initialization
	led_init_all();
 80002ce:	f7ff ff8b 	bl	80001e8 <led_init_all>

	//initialize systick timer
	init_systick_timer(TICK_HZ);
 80002d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002d6:	f000 f84b 	bl	8000370 <init_systick_timer>

	//change sp from MSP to PSP
	switch_sp_to_psp();
 80002da:	f000 fa03 	bl	80006e4 <switch_sp_to_psp>

	//call the first task
	task1_handler();
 80002de:	f000 f806 	bl	80002ee <task1_handler>


    /* Loop forever */
	for(;;);
 80002e2:	e7fe      	b.n	80002e2 <main+0x26>
 80002e4:	2001ec00 	.word	0x2001ec00

080002e8 <idle_task>:
}

void idle_task(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	af00      	add	r7, sp, #0
	while(1);
 80002ec:	e7fe      	b.n	80002ec <idle_task+0x4>

080002ee <task1_handler>:
}
void task1_handler(void)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_GREEN);
 80002f2:	200c      	movs	r0, #12
 80002f4:	f7ff ffb2 	bl	800025c <led_on>
		task_delay(1000);
 80002f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fc:	f000 fa12 	bl	8000724 <task_delay>
		led_off(LED_GREEN);
 8000300:	200c      	movs	r0, #12
 8000302:	f7ff ffc3 	bl	800028c <led_off>
		task_delay(1000);
 8000306:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800030a:	f000 fa0b 	bl	8000724 <task_delay>
		led_on(LED_GREEN);
 800030e:	e7f0      	b.n	80002f2 <task1_handler+0x4>

08000310 <task2_handler>:
	}
}

void task2_handler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_ORANGE);
 8000314:	200d      	movs	r0, #13
 8000316:	f7ff ffa1 	bl	800025c <led_on>
		task_delay(500);
 800031a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800031e:	f000 fa01 	bl	8000724 <task_delay>
		led_off(LED_ORANGE);
 8000322:	200d      	movs	r0, #13
 8000324:	f7ff ffb2 	bl	800028c <led_off>
		task_delay(500);
 8000328:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800032c:	f000 f9fa 	bl	8000724 <task_delay>
		led_on(LED_ORANGE);
 8000330:	e7f0      	b.n	8000314 <task2_handler+0x4>

08000332 <task3_handler>:
	}
}

void task3_handler(void)
{
 8000332:	b580      	push	{r7, lr}
 8000334:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_BLUE);
 8000336:	200f      	movs	r0, #15
 8000338:	f7ff ff90 	bl	800025c <led_on>
		task_delay(250);
 800033c:	20fa      	movs	r0, #250	; 0xfa
 800033e:	f000 f9f1 	bl	8000724 <task_delay>
		led_off(LED_BLUE);
 8000342:	200f      	movs	r0, #15
 8000344:	f7ff ffa2 	bl	800028c <led_off>
		task_delay(250);
 8000348:	20fa      	movs	r0, #250	; 0xfa
 800034a:	f000 f9eb 	bl	8000724 <task_delay>
		led_on(LED_BLUE);
 800034e:	e7f2      	b.n	8000336 <task3_handler+0x4>

08000350 <task4_handler>:
	}
}

void task4_handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
	while(1)
	{
		led_on(LED_RED);
 8000354:	200e      	movs	r0, #14
 8000356:	f7ff ff81 	bl	800025c <led_on>
		task_delay(125);
 800035a:	207d      	movs	r0, #125	; 0x7d
 800035c:	f000 f9e2 	bl	8000724 <task_delay>
		led_off(LED_RED);
 8000360:	200e      	movs	r0, #14
 8000362:	f7ff ff93 	bl	800028c <led_off>
		task_delay(125);
 8000366:	207d      	movs	r0, #125	; 0x7d
 8000368:	f000 f9dc 	bl	8000724 <task_delay>
		led_on(LED_RED);
 800036c:	e7f2      	b.n	8000354 <task4_handler+0x4>
	...

08000370 <init_systick_timer>:
	}
}

// sys_tick timer initialization
void init_systick_timer(uint32_t tick_hz)
{
 8000370:	b480      	push	{r7}
 8000372:	b087      	sub	sp, #28
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	uint32_t *pSRVR = (uint32_t*)0xE000E014;
 8000378:	4b16      	ldr	r3, [pc, #88]	; (80003d4 <init_systick_timer+0x64>)
 800037a:	617b      	str	r3, [r7, #20]
	uint32_t *pSCSR = (uint32_t*)0xE000E010;
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <init_systick_timer+0x68>)
 800037e:	613b      	str	r3, [r7, #16]
	uint32_t count_value = ((SYSTICK_TIM_CLK)/(tick_hz))-1; // N-1 value has to be loaded for N count
 8000380:	4a16      	ldr	r2, [pc, #88]	; (80003dc <init_systick_timer+0x6c>)
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	fbb2 f3f3 	udiv	r3, r2, r3
 8000388:	3b01      	subs	r3, #1
 800038a:	60fb      	str	r3, [r7, #12]

	//clear the SRVR
	*pSRVR &= ~(0x00FFFFFF);
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	601a      	str	r2, [r3, #0]

	//load the SRVR with count
	*pSRVR |= count_value;
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	681a      	ldr	r2, [r3, #0]
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	431a      	orrs	r2, r3
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	601a      	str	r2, [r3, #0]

	//some settings
	*pSCSR |= (1<<2); // indicates clock source, processor clock
 80003a4:	693b      	ldr	r3, [r7, #16]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f043 0204 	orr.w	r2, r3, #4
 80003ac:	693b      	ldr	r3, [r7, #16]
 80003ae:	601a      	str	r2, [r3, #0]
	*pSCSR |= (1<<1); // Enables systick exception request
 80003b0:	693b      	ldr	r3, [r7, #16]
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f043 0202 	orr.w	r2, r3, #2
 80003b8:	693b      	ldr	r3, [r7, #16]
 80003ba:	601a      	str	r2, [r3, #0]

	//enable systick timer
	*pSCSR |= (1<<0); // enable the counter
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	f043 0201 	orr.w	r2, r3, #1
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	601a      	str	r2, [r3, #0]
}
 80003c8:	bf00      	nop
 80003ca:	371c      	adds	r7, #28
 80003cc:	46bd      	mov	sp, r7
 80003ce:	bc80      	pop	{r7}
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	e000e014 	.word	0xe000e014
 80003d8:	e000e010 	.word	0xe000e010
 80003dc:	00f42400 	.word	0x00f42400

080003e0 <PendSV_Handler>:
__attribute__((naked)) void PendSV_Handler(void)
{
	//save the context of the current task

		//1. Get current running task's psp value
		__asm volatile("MRS R0,PSP");
 80003e0:	f3ef 8009 	mrs	r0, PSP

		//2.using that psp value store SF2(R4 to R11)
		__asm volatile("STMDB R0!,{R4-R11}");
 80003e4:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		//push LR
		__asm volatile("PUSH {LR}");
 80003e8:	b500      	push	{lr}

		//3. save current psp value
		__asm volatile("BL save_psp_value");
 80003ea:	f000 f967 	bl	80006bc <save_psp_value>

		//Retrieve the context of the next task

		//1.decide the next task
		__asm volatile("BL update_next_task");
 80003ee:	f000 f85f 	bl	80004b0 <update_next_task>

		//2.get its past psp value
		__asm volatile("BL get_psp_value");
 80003f2:	f000 f953 	bl	800069c <get_psp_value>

		//3.using that psp value retrieve sf2(R4-R11)
		__asm volatile("LDMIA R0!,{R4-R11}");
 80003f6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

		//4.update PSP and exit
		__asm volatile ("MSR PSP,R0");
 80003fa:	f380 8809 	msr	PSP, r0

		//pop LR
		__asm volatile("POP {LR}");
 80003fe:	f85d eb04 	ldr.w	lr, [sp], #4

		//exit function manually
		__asm volatile("BX LR");
 8000402:	4770      	bx	lr

}
 8000404:	bf00      	nop
	...

08000408 <unblock_tasks>:

void unblock_tasks(void)
{
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
	for(int i=1;i<MAX_TASKS;i++)
 800040e:	2301      	movs	r3, #1
 8000410:	607b      	str	r3, [r7, #4]
 8000412:	e01b      	b.n	800044c <unblock_tasks+0x44>
	{
		if(user_tasks[i].current_state!=TASK_READY_STATE)
 8000414:	4a12      	ldr	r2, [pc, #72]	; (8000460 <unblock_tasks+0x58>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	011b      	lsls	r3, r3, #4
 800041a:	4413      	add	r3, r2
 800041c:	3308      	adds	r3, #8
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b00      	cmp	r3, #0
 8000422:	d010      	beq.n	8000446 <unblock_tasks+0x3e>
		{
			if(user_tasks[i].block_count==g_tick_count)
 8000424:	4a0e      	ldr	r2, [pc, #56]	; (8000460 <unblock_tasks+0x58>)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	011b      	lsls	r3, r3, #4
 800042a:	4413      	add	r3, r2
 800042c:	3304      	adds	r3, #4
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	4b0c      	ldr	r3, [pc, #48]	; (8000464 <unblock_tasks+0x5c>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	429a      	cmp	r2, r3
 8000436:	d106      	bne.n	8000446 <unblock_tasks+0x3e>
			{
				user_tasks[i].current_state = TASK_READY_STATE;
 8000438:	4a09      	ldr	r2, [pc, #36]	; (8000460 <unblock_tasks+0x58>)
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	011b      	lsls	r3, r3, #4
 800043e:	4413      	add	r3, r2
 8000440:	3308      	adds	r3, #8
 8000442:	2200      	movs	r2, #0
 8000444:	701a      	strb	r2, [r3, #0]
	for(int i=1;i<MAX_TASKS;i++)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	3301      	adds	r3, #1
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2b04      	cmp	r3, #4
 8000450:	dde0      	ble.n	8000414 <unblock_tasks+0xc>
			}
		}
	}
}
 8000452:	bf00      	nop
 8000454:	bf00      	nop
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	200000bc 	.word	0x200000bc
 8000464:	20000084 	.word	0x20000084

08000468 <update_global_tick_count>:

void update_global_tick_count(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
	g_tick_count++;
 800046c:	4b04      	ldr	r3, [pc, #16]	; (8000480 <update_global_tick_count+0x18>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	3301      	adds	r3, #1
 8000472:	4a03      	ldr	r2, [pc, #12]	; (8000480 <update_global_tick_count+0x18>)
 8000474:	6013      	str	r3, [r2, #0]
}
 8000476:	bf00      	nop
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	20000084 	.word	0x20000084

08000484 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 800048a:	4b08      	ldr	r3, [pc, #32]	; (80004ac <SysTick_Handler+0x28>)
 800048c:	607b      	str	r3, [r7, #4]
	update_global_tick_count();
 800048e:	f7ff ffeb 	bl	8000468 <update_global_tick_count>
	unblock_tasks();
 8000492:	f7ff ffb9 	bl	8000408 <unblock_tasks>

	//pend the pendsv handler
	*pICSR |= (1<<28);
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	601a      	str	r2, [r3, #0]
}
 80004a2:	bf00      	nop
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	e000ed04 	.word	0xe000ed04

080004b0 <update_next_task>:

void update_next_task(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
	int state = TASK_BLOCKED_STATE;
 80004b6:	23ff      	movs	r3, #255	; 0xff
 80004b8:	607b      	str	r3, [r7, #4]
	for(int i=0;i<MAX_TASKS;i++)
 80004ba:	2300      	movs	r3, #0
 80004bc:	603b      	str	r3, [r7, #0]
 80004be:	e024      	b.n	800050a <update_next_task+0x5a>
	{
		current_task++;
 80004c0:	4b1a      	ldr	r3, [pc, #104]	; (800052c <update_next_task+0x7c>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	b2da      	uxtb	r2, r3
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <update_next_task+0x7c>)
 80004ca:	701a      	strb	r2, [r3, #0]
		current_task %= MAX_TASKS;
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <update_next_task+0x7c>)
 80004ce:	781a      	ldrb	r2, [r3, #0]
 80004d0:	4b17      	ldr	r3, [pc, #92]	; (8000530 <update_next_task+0x80>)
 80004d2:	fba3 1302 	umull	r1, r3, r3, r2
 80004d6:	0899      	lsrs	r1, r3, #2
 80004d8:	460b      	mov	r3, r1
 80004da:	009b      	lsls	r3, r3, #2
 80004dc:	440b      	add	r3, r1
 80004de:	1ad3      	subs	r3, r2, r3
 80004e0:	b2da      	uxtb	r2, r3
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <update_next_task+0x7c>)
 80004e4:	701a      	strb	r2, [r3, #0]
		state = user_tasks[current_task].current_state;
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <update_next_task+0x7c>)
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <update_next_task+0x84>)
 80004ec:	011b      	lsls	r3, r3, #4
 80004ee:	4413      	add	r3, r2
 80004f0:	3308      	adds	r3, #8
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	607b      	str	r3, [r7, #4]
		if( (state==TASK_READY_STATE) && (current_task!=0))
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d103      	bne.n	8000504 <update_next_task+0x54>
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <update_next_task+0x7c>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d106      	bne.n	8000512 <update_next_task+0x62>
	for(int i=0;i<MAX_TASKS;i++)
 8000504:	683b      	ldr	r3, [r7, #0]
 8000506:	3301      	adds	r3, #1
 8000508:	603b      	str	r3, [r7, #0]
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	2b04      	cmp	r3, #4
 800050e:	ddd7      	ble.n	80004c0 <update_next_task+0x10>
 8000510:	e000      	b.n	8000514 <update_next_task+0x64>
			break;
 8000512:	bf00      	nop
	}
	if(state!=TASK_READY_STATE)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d002      	beq.n	8000520 <update_next_task+0x70>
		current_task=0;
 800051a:	4b04      	ldr	r3, [pc, #16]	; (800052c <update_next_task+0x7c>)
 800051c:	2200      	movs	r2, #0
 800051e:	701a      	strb	r2, [r3, #0]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bc80      	pop	{r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000000 	.word	0x20000000
 8000530:	cccccccd 	.word	0xcccccccd
 8000534:	200000bc 	.word	0x200000bc

08000538 <init_scheduler_stack>:

__attribute__((naked)) void init_scheduler_stack(uint32_t sched_top_of_stack)
{
 8000538:	4603      	mov	r3, r0
	__asm volatile("MSR MSP,%0"::"r"(sched_top_of_stack):);
 800053a:	f383 8808 	msr	MSP, r3
	__asm volatile("BX LR");
 800053e:	4770      	bx	lr
}
 8000540:	bf00      	nop
	...

08000544 <init_task_stack>:

void init_task_stack(void)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
	user_tasks[0].current_state = TASK_READY_STATE;
 800054a:	4b3a      	ldr	r3, [pc, #232]	; (8000634 <init_task_stack+0xf0>)
 800054c:	2200      	movs	r2, #0
 800054e:	721a      	strb	r2, [r3, #8]
	user_tasks[1].current_state = TASK_READY_STATE;
 8000550:	4b38      	ldr	r3, [pc, #224]	; (8000634 <init_task_stack+0xf0>)
 8000552:	2200      	movs	r2, #0
 8000554:	761a      	strb	r2, [r3, #24]
	user_tasks[2].current_state = TASK_READY_STATE;
 8000556:	4b37      	ldr	r3, [pc, #220]	; (8000634 <init_task_stack+0xf0>)
 8000558:	2200      	movs	r2, #0
 800055a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	user_tasks[3].current_state = TASK_READY_STATE;
 800055e:	4b35      	ldr	r3, [pc, #212]	; (8000634 <init_task_stack+0xf0>)
 8000560:	2200      	movs	r2, #0
 8000562:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	user_tasks[4].current_state = TASK_READY_STATE;
 8000566:	4b33      	ldr	r3, [pc, #204]	; (8000634 <init_task_stack+0xf0>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	user_tasks[0].psp_value = IDLE_STACK_START;
 800056e:	4b31      	ldr	r3, [pc, #196]	; (8000634 <init_task_stack+0xf0>)
 8000570:	4a31      	ldr	r2, [pc, #196]	; (8000638 <init_task_stack+0xf4>)
 8000572:	601a      	str	r2, [r3, #0]
	user_tasks[1].psp_value = T1_STACK_START;
 8000574:	4b2f      	ldr	r3, [pc, #188]	; (8000634 <init_task_stack+0xf0>)
 8000576:	4a31      	ldr	r2, [pc, #196]	; (800063c <init_task_stack+0xf8>)
 8000578:	611a      	str	r2, [r3, #16]
	user_tasks[2].psp_value = T2_STACK_START;
 800057a:	4b2e      	ldr	r3, [pc, #184]	; (8000634 <init_task_stack+0xf0>)
 800057c:	4a30      	ldr	r2, [pc, #192]	; (8000640 <init_task_stack+0xfc>)
 800057e:	621a      	str	r2, [r3, #32]
	user_tasks[3].psp_value = T3_STACK_START;
 8000580:	4b2c      	ldr	r3, [pc, #176]	; (8000634 <init_task_stack+0xf0>)
 8000582:	4a30      	ldr	r2, [pc, #192]	; (8000644 <init_task_stack+0x100>)
 8000584:	631a      	str	r2, [r3, #48]	; 0x30
	user_tasks[4].psp_value = T4_STACK_START;
 8000586:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <init_task_stack+0xf0>)
 8000588:	4a2f      	ldr	r2, [pc, #188]	; (8000648 <init_task_stack+0x104>)
 800058a:	641a      	str	r2, [r3, #64]	; 0x40

	user_tasks[0].task_handler = idle_task;
 800058c:	4b29      	ldr	r3, [pc, #164]	; (8000634 <init_task_stack+0xf0>)
 800058e:	4a2f      	ldr	r2, [pc, #188]	; (800064c <init_task_stack+0x108>)
 8000590:	60da      	str	r2, [r3, #12]
	user_tasks[1].task_handler = task1_handler;
 8000592:	4b28      	ldr	r3, [pc, #160]	; (8000634 <init_task_stack+0xf0>)
 8000594:	4a2e      	ldr	r2, [pc, #184]	; (8000650 <init_task_stack+0x10c>)
 8000596:	61da      	str	r2, [r3, #28]
	user_tasks[2].task_handler = task2_handler;
 8000598:	4b26      	ldr	r3, [pc, #152]	; (8000634 <init_task_stack+0xf0>)
 800059a:	4a2e      	ldr	r2, [pc, #184]	; (8000654 <init_task_stack+0x110>)
 800059c:	62da      	str	r2, [r3, #44]	; 0x2c
	user_tasks[3].task_handler = task3_handler;
 800059e:	4b25      	ldr	r3, [pc, #148]	; (8000634 <init_task_stack+0xf0>)
 80005a0:	4a2d      	ldr	r2, [pc, #180]	; (8000658 <init_task_stack+0x114>)
 80005a2:	63da      	str	r2, [r3, #60]	; 0x3c
	user_tasks[4].task_handler = task4_handler;
 80005a4:	4b23      	ldr	r3, [pc, #140]	; (8000634 <init_task_stack+0xf0>)
 80005a6:	4a2d      	ldr	r2, [pc, #180]	; (800065c <init_task_stack+0x118>)
 80005a8:	64da      	str	r2, [r3, #76]	; 0x4c

	uint32_t *pPSP;
	for(int i=0;i<MAX_TASKS;i++)
 80005aa:	2300      	movs	r3, #0
 80005ac:	60bb      	str	r3, [r7, #8]
 80005ae:	e037      	b.n	8000620 <init_task_stack+0xdc>
	{
		pPSP=(uint32_t*)user_tasks[i].psp_value;
 80005b0:	4a20      	ldr	r2, [pc, #128]	; (8000634 <init_task_stack+0xf0>)
 80005b2:	68bb      	ldr	r3, [r7, #8]
 80005b4:	011b      	lsls	r3, r3, #4
 80005b6:	4413      	add	r3, r2
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	60fb      	str	r3, [r7, #12]

		pPSP--;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3b04      	subs	r3, #4
 80005c0:	60fb      	str	r3, [r7, #12]
		*pPSP=DUMMY_XPSR; //0x01000000;
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80005c8:	601a      	str	r2, [r3, #0]

		pPSP--;//PC
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	3b04      	subs	r3, #4
 80005ce:	60fb      	str	r3, [r7, #12]
		*pPSP= (uint32_t) user_tasks[i].task_handler;
 80005d0:	4a18      	ldr	r2, [pc, #96]	; (8000634 <init_task_stack+0xf0>)
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	011b      	lsls	r3, r3, #4
 80005d6:	4413      	add	r3, r2
 80005d8:	330c      	adds	r3, #12
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	461a      	mov	r2, r3
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	601a      	str	r2, [r3, #0]

		pPSP--;// LR
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	3b04      	subs	r3, #4
 80005e6:	60fb      	str	r3, [r7, #12]
		*pPSP= 0xFFFFFFF9; //
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f06f 0206 	mvn.w	r2, #6
 80005ee:	601a      	str	r2, [r3, #0]

		for(int j=0;j<13;j++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	e008      	b.n	8000608 <init_task_stack+0xc4>
		{
			pPSP--;
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	3b04      	subs	r3, #4
 80005fa:	60fb      	str	r3, [r7, #12]
			*pPSP=0;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
		for(int j=0;j<13;j++)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	3301      	adds	r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2b0c      	cmp	r3, #12
 800060c:	ddf3      	ble.n	80005f6 <init_task_stack+0xb2>
		}
		user_tasks[i].psp_value=(uint32_t)pPSP;
 800060e:	68fa      	ldr	r2, [r7, #12]
 8000610:	4908      	ldr	r1, [pc, #32]	; (8000634 <init_task_stack+0xf0>)
 8000612:	68bb      	ldr	r3, [r7, #8]
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	440b      	add	r3, r1
 8000618:	601a      	str	r2, [r3, #0]
	for(int i=0;i<MAX_TASKS;i++)
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	3301      	adds	r3, #1
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	2b04      	cmp	r3, #4
 8000624:	ddc4      	ble.n	80005b0 <init_task_stack+0x6c>
	}
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bc80      	pop	{r7}
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	200000bc 	.word	0x200000bc
 8000638:	2001f000 	.word	0x2001f000
 800063c:	20020000 	.word	0x20020000
 8000640:	2001fc00 	.word	0x2001fc00
 8000644:	2001f800 	.word	0x2001f800
 8000648:	2001f400 	.word	0x2001f400
 800064c:	080002e9 	.word	0x080002e9
 8000650:	080002ef 	.word	0x080002ef
 8000654:	08000311 	.word	0x08000311
 8000658:	08000333 	.word	0x08000333
 800065c:	08000351 	.word	0x08000351

08000660 <enable_processor_faults>:

void enable_processor_faults(void)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
	uint32_t *pSHCSR=(uint32_t *)0xE000ED24;
 8000666:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <enable_processor_faults+0x38>)
 8000668:	607b      	str	r3, [r7, #4]

		*pSHCSR |= (1<<16); // to enable mem manage
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	601a      	str	r2, [r3, #0]
		*pSHCSR |= (1<<17); // to enable bus manage
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	601a      	str	r2, [r3, #0]
		*pSHCSR |= (1<<18); // to enable usage manage
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	601a      	str	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	e000ed24 	.word	0xe000ed24

0800069c <get_psp_value>:


uint32_t get_psp_value(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0
	return user_tasks[current_task].psp_value;
 80006a0:	4b04      	ldr	r3, [pc, #16]	; (80006b4 <get_psp_value+0x18>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <get_psp_value+0x1c>)
 80006a6:	011b      	lsls	r3, r3, #4
 80006a8:	4413      	add	r3, r2
 80006aa:	681b      	ldr	r3, [r3, #0]
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	20000000 	.word	0x20000000
 80006b8:	200000bc 	.word	0x200000bc

080006bc <save_psp_value>:

void save_psp_value(uint32_t current_psp_value)
{
 80006bc:	b480      	push	{r7}
 80006be:	b083      	sub	sp, #12
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	6078      	str	r0, [r7, #4]
	user_tasks[current_task].psp_value = current_psp_value;
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <save_psp_value+0x20>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4a05      	ldr	r2, [pc, #20]	; (80006e0 <save_psp_value+0x24>)
 80006ca:	011b      	lsls	r3, r3, #4
 80006cc:	4413      	add	r3, r2
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	601a      	str	r2, [r3, #0]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bc80      	pop	{r7}
 80006da:	4770      	bx	lr
 80006dc:	20000000 	.word	0x20000000
 80006e0:	200000bc 	.word	0x200000bc

080006e4 <switch_sp_to_psp>:
{
	//1.initialize the psp with task 1 stack

	// get the value of current task stack

	__asm volatile("PUSH {LR}");//save LR to go to main
 80006e4:	b500      	push	{lr}
	__asm volatile("BL get_psp_value");
 80006e6:	f7ff ffd9 	bl	800069c <get_psp_value>
	__asm volatile("MSR PSP,R0"); // as per call procedure r0 will have return value from get_psp_value
 80006ea:	f380 8809 	msr	PSP, r0
	__asm volatile("POP {LR}");// retrieves lr value
 80006ee:	f85d eb04 	ldr.w	lr, [sp], #4

	//2.change sp to psp using control reg

	__asm volatile("MOV R0,#0X02");
 80006f2:	f04f 0002 	mov.w	r0, #2
	__asm volatile("MSR CONTROL,R0");
 80006f6:	f380 8814 	msr	CONTROL, r0
	__asm volatile("BX LR");
 80006fa:	4770      	bx	lr

}
 80006fc:	bf00      	nop
	...

08000700 <schedule>:

void schedule(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
	uint32_t *pICSR = (uint32_t*)0xE000ED04;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <schedule+0x20>)
 8000708:	607b      	str	r3, [r7, #4]

	//pend the pendsv handler
	*pICSR |= (1<<28);
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	601a      	str	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	e000ed04 	.word	0xe000ed04

08000724 <task_delay>:

void task_delay(uint32_t tick_count)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	//disable interrupts
	INTERRUPT_DISABLE();
 800072c:	f04f 0001 	mov.w	r0, #1
 8000730:	f380 8810 	msr	PRIMASK, r0

	if(current_task)
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <task_delay+0x54>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d015      	beq.n	8000768 <task_delay+0x44>
	{
		user_tasks[current_task].block_count = g_tick_count + tick_count;
 800073c:	4b0f      	ldr	r3, [pc, #60]	; (800077c <task_delay+0x58>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b0d      	ldr	r3, [pc, #52]	; (8000778 <task_delay+0x54>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	4618      	mov	r0, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	441a      	add	r2, r3
 800074a:	490d      	ldr	r1, [pc, #52]	; (8000780 <task_delay+0x5c>)
 800074c:	0103      	lsls	r3, r0, #4
 800074e:	440b      	add	r3, r1
 8000750:	3304      	adds	r3, #4
 8000752:	601a      	str	r2, [r3, #0]
		user_tasks[current_task].current_state = TASK_BLOCKED_STATE;
 8000754:	4b08      	ldr	r3, [pc, #32]	; (8000778 <task_delay+0x54>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <task_delay+0x5c>)
 800075a:	011b      	lsls	r3, r3, #4
 800075c:	4413      	add	r3, r2
 800075e:	3308      	adds	r3, #8
 8000760:	22ff      	movs	r2, #255	; 0xff
 8000762:	701a      	strb	r2, [r3, #0]
		schedule();
 8000764:	f7ff ffcc 	bl	8000700 <schedule>
	}

	//enable interrupts
	INTERRUPT_ENABLE();
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	f380 8810 	msr	PRIMASK, r0
}
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000000 	.word	0x20000000
 800077c:	20000084 	.word	0x20000084
 8000780:	200000bc 	.word	0x200000bc

08000784 <BusFault_Handler>:

void BusFault_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	printf("Exception Fault: Bus Fault\n");
 8000788:	4801      	ldr	r0, [pc, #4]	; (8000790 <BusFault_Handler+0xc>)
 800078a:	f000 f9a3 	bl	8000ad4 <puts>
	while(1);
 800078e:	e7fe      	b.n	800078e <BusFault_Handler+0xa>
 8000790:	08001398 	.word	0x08001398

08000794 <MemManage_Handler>:
}

void MemManage_Handler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	printf("Exception Fault: Mem Fault\n");
 8000798:	4801      	ldr	r0, [pc, #4]	; (80007a0 <MemManage_Handler+0xc>)
 800079a:	f000 f99b 	bl	8000ad4 <puts>
	while(1);
 800079e:	e7fe      	b.n	800079e <MemManage_Handler+0xa>
 80007a0:	080013b4 	.word	0x080013b4

080007a4 <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
	printf("Exception Fault: Hard Fault\n");
 80007a8:	4801      	ldr	r0, [pc, #4]	; (80007b0 <HardFault_Handler+0xc>)
 80007aa:	f000 f993 	bl	8000ad4 <puts>
	while(1);
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0xa>
 80007b0:	080013d0 	.word	0x080013d0

080007b4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <ITM_SendChar+0x44>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <ITM_SendChar+0x44>)
 80007c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007c8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <ITM_SendChar+0x48>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a0b      	ldr	r2, [pc, #44]	; (80007fc <ITM_SendChar+0x48>)
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80007d6:	bf00      	nop
 80007d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0f8      	beq.n	80007d8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80007e6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	6013      	str	r3, [r2, #0]
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	e000edfc 	.word	0xe000edfc
 80007fc:	e0000e00 	.word	0xe0000e00

08000800 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b086      	sub	sp, #24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
 8000810:	e00a      	b.n	8000828 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000812:	f3af 8000 	nop.w
 8000816:	4601      	mov	r1, r0
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	60ba      	str	r2, [r7, #8]
 800081e:	b2ca      	uxtb	r2, r1
 8000820:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000822:	697b      	ldr	r3, [r7, #20]
 8000824:	3301      	adds	r3, #1
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697a      	ldr	r2, [r7, #20]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	429a      	cmp	r2, r3
 800082e:	dbf0      	blt.n	8000812 <_read+0x12>
	}

return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b086      	sub	sp, #24
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
 800084a:	e009      	b.n	8000860 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	1c5a      	adds	r2, r3, #1
 8000850:	60ba      	str	r2, [r7, #8]
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ffad 	bl	80007b4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3301      	adds	r3, #1
 800085e:	617b      	str	r3, [r7, #20]
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	429a      	cmp	r2, r3
 8000866:	dbf1      	blt.n	800084c <_write+0x12>
	}
	return len;
 8000868:	687b      	ldr	r3, [r7, #4]
}
 800086a:	4618      	mov	r0, r3
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}

08000872 <_close>:

int _close(int file)
{
 8000872:	b480      	push	{r7}
 8000874:	b083      	sub	sp, #12
 8000876:	af00      	add	r7, sp, #0
 8000878:	6078      	str	r0, [r7, #4]
	return -1;
 800087a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800087e:	4618      	mov	r0, r3
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000898:	605a      	str	r2, [r3, #4]
	return 0;
 800089a:	2300      	movs	r3, #0
}
 800089c:	4618      	mov	r0, r3
 800089e:	370c      	adds	r7, #12
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bc80      	pop	{r7}
 80008a4:	4770      	bx	lr

080008a6 <_isatty>:

int _isatty(int file)
{
 80008a6:	b480      	push	{r7}
 80008a8:	b083      	sub	sp, #12
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	6078      	str	r0, [r7, #4]
	return 1;
 80008ae:	2301      	movs	r3, #1
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr

080008ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80008ba:	b480      	push	{r7}
 80008bc:	b085      	sub	sp, #20
 80008be:	af00      	add	r7, sp, #0
 80008c0:	60f8      	str	r0, [r7, #12]
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
	return 0;
 80008c6:	2300      	movs	r3, #0
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bc80      	pop	{r7}
 80008d0:	4770      	bx	lr
	...

080008d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80008dc:	4a14      	ldr	r2, [pc, #80]	; (8000930 <_sbrk+0x5c>)
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <_sbrk+0x60>)
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80008e4:	697b      	ldr	r3, [r7, #20]
 80008e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008e8:	4b13      	ldr	r3, [pc, #76]	; (8000938 <_sbrk+0x64>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d102      	bne.n	80008f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <_sbrk+0x64>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <_sbrk+0x68>)
 80008f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <_sbrk+0x64>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4413      	add	r3, r2
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	429a      	cmp	r2, r3
 8000902:	d207      	bcs.n	8000914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000904:	f000 f846 	bl	8000994 <__errno>
 8000908:	4603      	mov	r3, r0
 800090a:	220c      	movs	r2, #12
 800090c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800090e:	f04f 33ff 	mov.w	r3, #4294967295
 8000912:	e009      	b.n	8000928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000914:	4b08      	ldr	r3, [pc, #32]	; (8000938 <_sbrk+0x64>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800091a:	4b07      	ldr	r3, [pc, #28]	; (8000938 <_sbrk+0x64>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	4413      	add	r3, r2
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <_sbrk+0x64>)
 8000924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000926:	68fb      	ldr	r3, [r7, #12]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20020000 	.word	0x20020000
 8000934:	00000400 	.word	0x00000400
 8000938:	20000088 	.word	0x20000088
 800093c:	20000120 	.word	0x20000120

08000940 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000942:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000944:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <LoopForever+0x6>)
  ldr r1, =_edata
 800094a:	490d      	ldr	r1, [pc, #52]	; (8000980 <LoopForever+0xa>)
  ldr r2, =_sidata
 800094c:	4a0d      	ldr	r2, [pc, #52]	; (8000984 <LoopForever+0xe>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000960:	4c0a      	ldr	r4, [pc, #40]	; (800098c <LoopForever+0x16>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800096e:	f000 f817 	bl	80009a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000972:	f7ff fca3 	bl	80002bc <main>

08000976 <LoopForever>:

LoopForever:
    b LoopForever
 8000976:	e7fe      	b.n	8000976 <LoopForever>
  ldr   r0, =_estack
 8000978:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800097c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000980:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000984:	08001458 	.word	0x08001458
  ldr r2, =_sbss
 8000988:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800098c:	2000011c 	.word	0x2000011c

08000990 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000990:	e7fe      	b.n	8000990 <ADC_IRQHandler>
	...

08000994 <__errno>:
 8000994:	4b01      	ldr	r3, [pc, #4]	; (800099c <__errno+0x8>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000004 	.word	0x20000004

080009a0 <__libc_init_array>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	4d0d      	ldr	r5, [pc, #52]	; (80009d8 <__libc_init_array+0x38>)
 80009a4:	4c0d      	ldr	r4, [pc, #52]	; (80009dc <__libc_init_array+0x3c>)
 80009a6:	1b64      	subs	r4, r4, r5
 80009a8:	10a4      	asrs	r4, r4, #2
 80009aa:	2600      	movs	r6, #0
 80009ac:	42a6      	cmp	r6, r4
 80009ae:	d109      	bne.n	80009c4 <__libc_init_array+0x24>
 80009b0:	4d0b      	ldr	r5, [pc, #44]	; (80009e0 <__libc_init_array+0x40>)
 80009b2:	4c0c      	ldr	r4, [pc, #48]	; (80009e4 <__libc_init_array+0x44>)
 80009b4:	f000 fce4 	bl	8001380 <_init>
 80009b8:	1b64      	subs	r4, r4, r5
 80009ba:	10a4      	asrs	r4, r4, #2
 80009bc:	2600      	movs	r6, #0
 80009be:	42a6      	cmp	r6, r4
 80009c0:	d105      	bne.n	80009ce <__libc_init_array+0x2e>
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c8:	4798      	blx	r3
 80009ca:	3601      	adds	r6, #1
 80009cc:	e7ee      	b.n	80009ac <__libc_init_array+0xc>
 80009ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d2:	4798      	blx	r3
 80009d4:	3601      	adds	r6, #1
 80009d6:	e7f2      	b.n	80009be <__libc_init_array+0x1e>
 80009d8:	08001450 	.word	0x08001450
 80009dc:	08001450 	.word	0x08001450
 80009e0:	08001450 	.word	0x08001450
 80009e4:	08001454 	.word	0x08001454

080009e8 <memset>:
 80009e8:	4402      	add	r2, r0
 80009ea:	4603      	mov	r3, r0
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d100      	bne.n	80009f2 <memset+0xa>
 80009f0:	4770      	bx	lr
 80009f2:	f803 1b01 	strb.w	r1, [r3], #1
 80009f6:	e7f9      	b.n	80009ec <memset+0x4>

080009f8 <_puts_r>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	460e      	mov	r6, r1
 80009fc:	4605      	mov	r5, r0
 80009fe:	b118      	cbz	r0, 8000a08 <_puts_r+0x10>
 8000a00:	6983      	ldr	r3, [r0, #24]
 8000a02:	b90b      	cbnz	r3, 8000a08 <_puts_r+0x10>
 8000a04:	f000 fa48 	bl	8000e98 <__sinit>
 8000a08:	69ab      	ldr	r3, [r5, #24]
 8000a0a:	68ac      	ldr	r4, [r5, #8]
 8000a0c:	b913      	cbnz	r3, 8000a14 <_puts_r+0x1c>
 8000a0e:	4628      	mov	r0, r5
 8000a10:	f000 fa42 	bl	8000e98 <__sinit>
 8000a14:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <_puts_r+0xd0>)
 8000a16:	429c      	cmp	r4, r3
 8000a18:	d120      	bne.n	8000a5c <_puts_r+0x64>
 8000a1a:	686c      	ldr	r4, [r5, #4]
 8000a1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a1e:	07db      	lsls	r3, r3, #31
 8000a20:	d405      	bmi.n	8000a2e <_puts_r+0x36>
 8000a22:	89a3      	ldrh	r3, [r4, #12]
 8000a24:	0598      	lsls	r0, r3, #22
 8000a26:	d402      	bmi.n	8000a2e <_puts_r+0x36>
 8000a28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a2a:	f000 fad3 	bl	8000fd4 <__retarget_lock_acquire_recursive>
 8000a2e:	89a3      	ldrh	r3, [r4, #12]
 8000a30:	0719      	lsls	r1, r3, #28
 8000a32:	d51d      	bpl.n	8000a70 <_puts_r+0x78>
 8000a34:	6923      	ldr	r3, [r4, #16]
 8000a36:	b1db      	cbz	r3, 8000a70 <_puts_r+0x78>
 8000a38:	3e01      	subs	r6, #1
 8000a3a:	68a3      	ldr	r3, [r4, #8]
 8000a3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000a40:	3b01      	subs	r3, #1
 8000a42:	60a3      	str	r3, [r4, #8]
 8000a44:	bb39      	cbnz	r1, 8000a96 <_puts_r+0x9e>
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	da38      	bge.n	8000abc <_puts_r+0xc4>
 8000a4a:	4622      	mov	r2, r4
 8000a4c:	210a      	movs	r1, #10
 8000a4e:	4628      	mov	r0, r5
 8000a50:	f000 f848 	bl	8000ae4 <__swbuf_r>
 8000a54:	3001      	adds	r0, #1
 8000a56:	d011      	beq.n	8000a7c <_puts_r+0x84>
 8000a58:	250a      	movs	r5, #10
 8000a5a:	e011      	b.n	8000a80 <_puts_r+0x88>
 8000a5c:	4b1b      	ldr	r3, [pc, #108]	; (8000acc <_puts_r+0xd4>)
 8000a5e:	429c      	cmp	r4, r3
 8000a60:	d101      	bne.n	8000a66 <_puts_r+0x6e>
 8000a62:	68ac      	ldr	r4, [r5, #8]
 8000a64:	e7da      	b.n	8000a1c <_puts_r+0x24>
 8000a66:	4b1a      	ldr	r3, [pc, #104]	; (8000ad0 <_puts_r+0xd8>)
 8000a68:	429c      	cmp	r4, r3
 8000a6a:	bf08      	it	eq
 8000a6c:	68ec      	ldreq	r4, [r5, #12]
 8000a6e:	e7d5      	b.n	8000a1c <_puts_r+0x24>
 8000a70:	4621      	mov	r1, r4
 8000a72:	4628      	mov	r0, r5
 8000a74:	f000 f888 	bl	8000b88 <__swsetup_r>
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d0dd      	beq.n	8000a38 <_puts_r+0x40>
 8000a7c:	f04f 35ff 	mov.w	r5, #4294967295
 8000a80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000a82:	07da      	lsls	r2, r3, #31
 8000a84:	d405      	bmi.n	8000a92 <_puts_r+0x9a>
 8000a86:	89a3      	ldrh	r3, [r4, #12]
 8000a88:	059b      	lsls	r3, r3, #22
 8000a8a:	d402      	bmi.n	8000a92 <_puts_r+0x9a>
 8000a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000a8e:	f000 faa2 	bl	8000fd6 <__retarget_lock_release_recursive>
 8000a92:	4628      	mov	r0, r5
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	da04      	bge.n	8000aa4 <_puts_r+0xac>
 8000a9a:	69a2      	ldr	r2, [r4, #24]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	dc06      	bgt.n	8000aae <_puts_r+0xb6>
 8000aa0:	290a      	cmp	r1, #10
 8000aa2:	d004      	beq.n	8000aae <_puts_r+0xb6>
 8000aa4:	6823      	ldr	r3, [r4, #0]
 8000aa6:	1c5a      	adds	r2, r3, #1
 8000aa8:	6022      	str	r2, [r4, #0]
 8000aaa:	7019      	strb	r1, [r3, #0]
 8000aac:	e7c5      	b.n	8000a3a <_puts_r+0x42>
 8000aae:	4622      	mov	r2, r4
 8000ab0:	4628      	mov	r0, r5
 8000ab2:	f000 f817 	bl	8000ae4 <__swbuf_r>
 8000ab6:	3001      	adds	r0, #1
 8000ab8:	d1bf      	bne.n	8000a3a <_puts_r+0x42>
 8000aba:	e7df      	b.n	8000a7c <_puts_r+0x84>
 8000abc:	6823      	ldr	r3, [r4, #0]
 8000abe:	250a      	movs	r5, #10
 8000ac0:	1c5a      	adds	r2, r3, #1
 8000ac2:	6022      	str	r2, [r4, #0]
 8000ac4:	701d      	strb	r5, [r3, #0]
 8000ac6:	e7db      	b.n	8000a80 <_puts_r+0x88>
 8000ac8:	08001410 	.word	0x08001410
 8000acc:	08001430 	.word	0x08001430
 8000ad0:	080013f0 	.word	0x080013f0

08000ad4 <puts>:
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <puts+0xc>)
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	6818      	ldr	r0, [r3, #0]
 8000ada:	f7ff bf8d 	b.w	80009f8 <_puts_r>
 8000ade:	bf00      	nop
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <__swbuf_r>:
 8000ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae6:	460e      	mov	r6, r1
 8000ae8:	4614      	mov	r4, r2
 8000aea:	4605      	mov	r5, r0
 8000aec:	b118      	cbz	r0, 8000af6 <__swbuf_r+0x12>
 8000aee:	6983      	ldr	r3, [r0, #24]
 8000af0:	b90b      	cbnz	r3, 8000af6 <__swbuf_r+0x12>
 8000af2:	f000 f9d1 	bl	8000e98 <__sinit>
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <__swbuf_r+0x98>)
 8000af8:	429c      	cmp	r4, r3
 8000afa:	d12b      	bne.n	8000b54 <__swbuf_r+0x70>
 8000afc:	686c      	ldr	r4, [r5, #4]
 8000afe:	69a3      	ldr	r3, [r4, #24]
 8000b00:	60a3      	str	r3, [r4, #8]
 8000b02:	89a3      	ldrh	r3, [r4, #12]
 8000b04:	071a      	lsls	r2, r3, #28
 8000b06:	d52f      	bpl.n	8000b68 <__swbuf_r+0x84>
 8000b08:	6923      	ldr	r3, [r4, #16]
 8000b0a:	b36b      	cbz	r3, 8000b68 <__swbuf_r+0x84>
 8000b0c:	6923      	ldr	r3, [r4, #16]
 8000b0e:	6820      	ldr	r0, [r4, #0]
 8000b10:	1ac0      	subs	r0, r0, r3
 8000b12:	6963      	ldr	r3, [r4, #20]
 8000b14:	b2f6      	uxtb	r6, r6
 8000b16:	4283      	cmp	r3, r0
 8000b18:	4637      	mov	r7, r6
 8000b1a:	dc04      	bgt.n	8000b26 <__swbuf_r+0x42>
 8000b1c:	4621      	mov	r1, r4
 8000b1e:	4628      	mov	r0, r5
 8000b20:	f000 f926 	bl	8000d70 <_fflush_r>
 8000b24:	bb30      	cbnz	r0, 8000b74 <__swbuf_r+0x90>
 8000b26:	68a3      	ldr	r3, [r4, #8]
 8000b28:	3b01      	subs	r3, #1
 8000b2a:	60a3      	str	r3, [r4, #8]
 8000b2c:	6823      	ldr	r3, [r4, #0]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	6022      	str	r2, [r4, #0]
 8000b32:	701e      	strb	r6, [r3, #0]
 8000b34:	6963      	ldr	r3, [r4, #20]
 8000b36:	3001      	adds	r0, #1
 8000b38:	4283      	cmp	r3, r0
 8000b3a:	d004      	beq.n	8000b46 <__swbuf_r+0x62>
 8000b3c:	89a3      	ldrh	r3, [r4, #12]
 8000b3e:	07db      	lsls	r3, r3, #31
 8000b40:	d506      	bpl.n	8000b50 <__swbuf_r+0x6c>
 8000b42:	2e0a      	cmp	r6, #10
 8000b44:	d104      	bne.n	8000b50 <__swbuf_r+0x6c>
 8000b46:	4621      	mov	r1, r4
 8000b48:	4628      	mov	r0, r5
 8000b4a:	f000 f911 	bl	8000d70 <_fflush_r>
 8000b4e:	b988      	cbnz	r0, 8000b74 <__swbuf_r+0x90>
 8000b50:	4638      	mov	r0, r7
 8000b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b54:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <__swbuf_r+0x9c>)
 8000b56:	429c      	cmp	r4, r3
 8000b58:	d101      	bne.n	8000b5e <__swbuf_r+0x7a>
 8000b5a:	68ac      	ldr	r4, [r5, #8]
 8000b5c:	e7cf      	b.n	8000afe <__swbuf_r+0x1a>
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <__swbuf_r+0xa0>)
 8000b60:	429c      	cmp	r4, r3
 8000b62:	bf08      	it	eq
 8000b64:	68ec      	ldreq	r4, [r5, #12]
 8000b66:	e7ca      	b.n	8000afe <__swbuf_r+0x1a>
 8000b68:	4621      	mov	r1, r4
 8000b6a:	4628      	mov	r0, r5
 8000b6c:	f000 f80c 	bl	8000b88 <__swsetup_r>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d0cb      	beq.n	8000b0c <__swbuf_r+0x28>
 8000b74:	f04f 37ff 	mov.w	r7, #4294967295
 8000b78:	e7ea      	b.n	8000b50 <__swbuf_r+0x6c>
 8000b7a:	bf00      	nop
 8000b7c:	08001410 	.word	0x08001410
 8000b80:	08001430 	.word	0x08001430
 8000b84:	080013f0 	.word	0x080013f0

08000b88 <__swsetup_r>:
 8000b88:	4b32      	ldr	r3, [pc, #200]	; (8000c54 <__swsetup_r+0xcc>)
 8000b8a:	b570      	push	{r4, r5, r6, lr}
 8000b8c:	681d      	ldr	r5, [r3, #0]
 8000b8e:	4606      	mov	r6, r0
 8000b90:	460c      	mov	r4, r1
 8000b92:	b125      	cbz	r5, 8000b9e <__swsetup_r+0x16>
 8000b94:	69ab      	ldr	r3, [r5, #24]
 8000b96:	b913      	cbnz	r3, 8000b9e <__swsetup_r+0x16>
 8000b98:	4628      	mov	r0, r5
 8000b9a:	f000 f97d 	bl	8000e98 <__sinit>
 8000b9e:	4b2e      	ldr	r3, [pc, #184]	; (8000c58 <__swsetup_r+0xd0>)
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	d10f      	bne.n	8000bc4 <__swsetup_r+0x3c>
 8000ba4:	686c      	ldr	r4, [r5, #4]
 8000ba6:	89a3      	ldrh	r3, [r4, #12]
 8000ba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000bac:	0719      	lsls	r1, r3, #28
 8000bae:	d42c      	bmi.n	8000c0a <__swsetup_r+0x82>
 8000bb0:	06dd      	lsls	r5, r3, #27
 8000bb2:	d411      	bmi.n	8000bd8 <__swsetup_r+0x50>
 8000bb4:	2309      	movs	r3, #9
 8000bb6:	6033      	str	r3, [r6, #0]
 8000bb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000bbc:	81a3      	strh	r3, [r4, #12]
 8000bbe:	f04f 30ff 	mov.w	r0, #4294967295
 8000bc2:	e03e      	b.n	8000c42 <__swsetup_r+0xba>
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <__swsetup_r+0xd4>)
 8000bc6:	429c      	cmp	r4, r3
 8000bc8:	d101      	bne.n	8000bce <__swsetup_r+0x46>
 8000bca:	68ac      	ldr	r4, [r5, #8]
 8000bcc:	e7eb      	b.n	8000ba6 <__swsetup_r+0x1e>
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <__swsetup_r+0xd8>)
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	bf08      	it	eq
 8000bd4:	68ec      	ldreq	r4, [r5, #12]
 8000bd6:	e7e6      	b.n	8000ba6 <__swsetup_r+0x1e>
 8000bd8:	0758      	lsls	r0, r3, #29
 8000bda:	d512      	bpl.n	8000c02 <__swsetup_r+0x7a>
 8000bdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000bde:	b141      	cbz	r1, 8000bf2 <__swsetup_r+0x6a>
 8000be0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000be4:	4299      	cmp	r1, r3
 8000be6:	d002      	beq.n	8000bee <__swsetup_r+0x66>
 8000be8:	4630      	mov	r0, r6
 8000bea:	f000 fa59 	bl	80010a0 <_free_r>
 8000bee:	2300      	movs	r3, #0
 8000bf0:	6363      	str	r3, [r4, #52]	; 0x34
 8000bf2:	89a3      	ldrh	r3, [r4, #12]
 8000bf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000bf8:	81a3      	strh	r3, [r4, #12]
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	6063      	str	r3, [r4, #4]
 8000bfe:	6923      	ldr	r3, [r4, #16]
 8000c00:	6023      	str	r3, [r4, #0]
 8000c02:	89a3      	ldrh	r3, [r4, #12]
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	81a3      	strh	r3, [r4, #12]
 8000c0a:	6923      	ldr	r3, [r4, #16]
 8000c0c:	b94b      	cbnz	r3, 8000c22 <__swsetup_r+0x9a>
 8000c0e:	89a3      	ldrh	r3, [r4, #12]
 8000c10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c18:	d003      	beq.n	8000c22 <__swsetup_r+0x9a>
 8000c1a:	4621      	mov	r1, r4
 8000c1c:	4630      	mov	r0, r6
 8000c1e:	f000 f9ff 	bl	8001020 <__smakebuf_r>
 8000c22:	89a0      	ldrh	r0, [r4, #12]
 8000c24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c28:	f010 0301 	ands.w	r3, r0, #1
 8000c2c:	d00a      	beq.n	8000c44 <__swsetup_r+0xbc>
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60a3      	str	r3, [r4, #8]
 8000c32:	6963      	ldr	r3, [r4, #20]
 8000c34:	425b      	negs	r3, r3
 8000c36:	61a3      	str	r3, [r4, #24]
 8000c38:	6923      	ldr	r3, [r4, #16]
 8000c3a:	b943      	cbnz	r3, 8000c4e <__swsetup_r+0xc6>
 8000c3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000c40:	d1ba      	bne.n	8000bb8 <__swsetup_r+0x30>
 8000c42:	bd70      	pop	{r4, r5, r6, pc}
 8000c44:	0781      	lsls	r1, r0, #30
 8000c46:	bf58      	it	pl
 8000c48:	6963      	ldrpl	r3, [r4, #20]
 8000c4a:	60a3      	str	r3, [r4, #8]
 8000c4c:	e7f4      	b.n	8000c38 <__swsetup_r+0xb0>
 8000c4e:	2000      	movs	r0, #0
 8000c50:	e7f7      	b.n	8000c42 <__swsetup_r+0xba>
 8000c52:	bf00      	nop
 8000c54:	20000004 	.word	0x20000004
 8000c58:	08001410 	.word	0x08001410
 8000c5c:	08001430 	.word	0x08001430
 8000c60:	080013f0 	.word	0x080013f0

08000c64 <__sflush_r>:
 8000c64:	898a      	ldrh	r2, [r1, #12]
 8000c66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	0710      	lsls	r0, r2, #28
 8000c6e:	460c      	mov	r4, r1
 8000c70:	d458      	bmi.n	8000d24 <__sflush_r+0xc0>
 8000c72:	684b      	ldr	r3, [r1, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	dc05      	bgt.n	8000c84 <__sflush_r+0x20>
 8000c78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	dc02      	bgt.n	8000c84 <__sflush_r+0x20>
 8000c7e:	2000      	movs	r0, #0
 8000c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000c84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d0f9      	beq.n	8000c7e <__sflush_r+0x1a>
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000c90:	682f      	ldr	r7, [r5, #0]
 8000c92:	602b      	str	r3, [r5, #0]
 8000c94:	d032      	beq.n	8000cfc <__sflush_r+0x98>
 8000c96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000c98:	89a3      	ldrh	r3, [r4, #12]
 8000c9a:	075a      	lsls	r2, r3, #29
 8000c9c:	d505      	bpl.n	8000caa <__sflush_r+0x46>
 8000c9e:	6863      	ldr	r3, [r4, #4]
 8000ca0:	1ac0      	subs	r0, r0, r3
 8000ca2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ca4:	b10b      	cbz	r3, 8000caa <__sflush_r+0x46>
 8000ca6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ca8:	1ac0      	subs	r0, r0, r3
 8000caa:	2300      	movs	r3, #0
 8000cac:	4602      	mov	r2, r0
 8000cae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000cb0:	6a21      	ldr	r1, [r4, #32]
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	47b0      	blx	r6
 8000cb6:	1c43      	adds	r3, r0, #1
 8000cb8:	89a3      	ldrh	r3, [r4, #12]
 8000cba:	d106      	bne.n	8000cca <__sflush_r+0x66>
 8000cbc:	6829      	ldr	r1, [r5, #0]
 8000cbe:	291d      	cmp	r1, #29
 8000cc0:	d82c      	bhi.n	8000d1c <__sflush_r+0xb8>
 8000cc2:	4a2a      	ldr	r2, [pc, #168]	; (8000d6c <__sflush_r+0x108>)
 8000cc4:	40ca      	lsrs	r2, r1
 8000cc6:	07d6      	lsls	r6, r2, #31
 8000cc8:	d528      	bpl.n	8000d1c <__sflush_r+0xb8>
 8000cca:	2200      	movs	r2, #0
 8000ccc:	6062      	str	r2, [r4, #4]
 8000cce:	04d9      	lsls	r1, r3, #19
 8000cd0:	6922      	ldr	r2, [r4, #16]
 8000cd2:	6022      	str	r2, [r4, #0]
 8000cd4:	d504      	bpl.n	8000ce0 <__sflush_r+0x7c>
 8000cd6:	1c42      	adds	r2, r0, #1
 8000cd8:	d101      	bne.n	8000cde <__sflush_r+0x7a>
 8000cda:	682b      	ldr	r3, [r5, #0]
 8000cdc:	b903      	cbnz	r3, 8000ce0 <__sflush_r+0x7c>
 8000cde:	6560      	str	r0, [r4, #84]	; 0x54
 8000ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000ce2:	602f      	str	r7, [r5, #0]
 8000ce4:	2900      	cmp	r1, #0
 8000ce6:	d0ca      	beq.n	8000c7e <__sflush_r+0x1a>
 8000ce8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d002      	beq.n	8000cf6 <__sflush_r+0x92>
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f000 f9d5 	bl	80010a0 <_free_r>
 8000cf6:	2000      	movs	r0, #0
 8000cf8:	6360      	str	r0, [r4, #52]	; 0x34
 8000cfa:	e7c1      	b.n	8000c80 <__sflush_r+0x1c>
 8000cfc:	6a21      	ldr	r1, [r4, #32]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	4628      	mov	r0, r5
 8000d02:	47b0      	blx	r6
 8000d04:	1c41      	adds	r1, r0, #1
 8000d06:	d1c7      	bne.n	8000c98 <__sflush_r+0x34>
 8000d08:	682b      	ldr	r3, [r5, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0c4      	beq.n	8000c98 <__sflush_r+0x34>
 8000d0e:	2b1d      	cmp	r3, #29
 8000d10:	d001      	beq.n	8000d16 <__sflush_r+0xb2>
 8000d12:	2b16      	cmp	r3, #22
 8000d14:	d101      	bne.n	8000d1a <__sflush_r+0xb6>
 8000d16:	602f      	str	r7, [r5, #0]
 8000d18:	e7b1      	b.n	8000c7e <__sflush_r+0x1a>
 8000d1a:	89a3      	ldrh	r3, [r4, #12]
 8000d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d20:	81a3      	strh	r3, [r4, #12]
 8000d22:	e7ad      	b.n	8000c80 <__sflush_r+0x1c>
 8000d24:	690f      	ldr	r7, [r1, #16]
 8000d26:	2f00      	cmp	r7, #0
 8000d28:	d0a9      	beq.n	8000c7e <__sflush_r+0x1a>
 8000d2a:	0793      	lsls	r3, r2, #30
 8000d2c:	680e      	ldr	r6, [r1, #0]
 8000d2e:	bf08      	it	eq
 8000d30:	694b      	ldreq	r3, [r1, #20]
 8000d32:	600f      	str	r7, [r1, #0]
 8000d34:	bf18      	it	ne
 8000d36:	2300      	movne	r3, #0
 8000d38:	eba6 0807 	sub.w	r8, r6, r7
 8000d3c:	608b      	str	r3, [r1, #8]
 8000d3e:	f1b8 0f00 	cmp.w	r8, #0
 8000d42:	dd9c      	ble.n	8000c7e <__sflush_r+0x1a>
 8000d44:	6a21      	ldr	r1, [r4, #32]
 8000d46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000d48:	4643      	mov	r3, r8
 8000d4a:	463a      	mov	r2, r7
 8000d4c:	4628      	mov	r0, r5
 8000d4e:	47b0      	blx	r6
 8000d50:	2800      	cmp	r0, #0
 8000d52:	dc06      	bgt.n	8000d62 <__sflush_r+0xfe>
 8000d54:	89a3      	ldrh	r3, [r4, #12]
 8000d56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d5a:	81a3      	strh	r3, [r4, #12]
 8000d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d60:	e78e      	b.n	8000c80 <__sflush_r+0x1c>
 8000d62:	4407      	add	r7, r0
 8000d64:	eba8 0800 	sub.w	r8, r8, r0
 8000d68:	e7e9      	b.n	8000d3e <__sflush_r+0xda>
 8000d6a:	bf00      	nop
 8000d6c:	20400001 	.word	0x20400001

08000d70 <_fflush_r>:
 8000d70:	b538      	push	{r3, r4, r5, lr}
 8000d72:	690b      	ldr	r3, [r1, #16]
 8000d74:	4605      	mov	r5, r0
 8000d76:	460c      	mov	r4, r1
 8000d78:	b913      	cbnz	r3, 8000d80 <_fflush_r+0x10>
 8000d7a:	2500      	movs	r5, #0
 8000d7c:	4628      	mov	r0, r5
 8000d7e:	bd38      	pop	{r3, r4, r5, pc}
 8000d80:	b118      	cbz	r0, 8000d8a <_fflush_r+0x1a>
 8000d82:	6983      	ldr	r3, [r0, #24]
 8000d84:	b90b      	cbnz	r3, 8000d8a <_fflush_r+0x1a>
 8000d86:	f000 f887 	bl	8000e98 <__sinit>
 8000d8a:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <_fflush_r+0x6c>)
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	d11b      	bne.n	8000dc8 <_fflush_r+0x58>
 8000d90:	686c      	ldr	r4, [r5, #4]
 8000d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d0ef      	beq.n	8000d7a <_fflush_r+0xa>
 8000d9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000d9c:	07d0      	lsls	r0, r2, #31
 8000d9e:	d404      	bmi.n	8000daa <_fflush_r+0x3a>
 8000da0:	0599      	lsls	r1, r3, #22
 8000da2:	d402      	bmi.n	8000daa <_fflush_r+0x3a>
 8000da4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000da6:	f000 f915 	bl	8000fd4 <__retarget_lock_acquire_recursive>
 8000daa:	4628      	mov	r0, r5
 8000dac:	4621      	mov	r1, r4
 8000dae:	f7ff ff59 	bl	8000c64 <__sflush_r>
 8000db2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000db4:	07da      	lsls	r2, r3, #31
 8000db6:	4605      	mov	r5, r0
 8000db8:	d4e0      	bmi.n	8000d7c <_fflush_r+0xc>
 8000dba:	89a3      	ldrh	r3, [r4, #12]
 8000dbc:	059b      	lsls	r3, r3, #22
 8000dbe:	d4dd      	bmi.n	8000d7c <_fflush_r+0xc>
 8000dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000dc2:	f000 f908 	bl	8000fd6 <__retarget_lock_release_recursive>
 8000dc6:	e7d9      	b.n	8000d7c <_fflush_r+0xc>
 8000dc8:	4b05      	ldr	r3, [pc, #20]	; (8000de0 <_fflush_r+0x70>)
 8000dca:	429c      	cmp	r4, r3
 8000dcc:	d101      	bne.n	8000dd2 <_fflush_r+0x62>
 8000dce:	68ac      	ldr	r4, [r5, #8]
 8000dd0:	e7df      	b.n	8000d92 <_fflush_r+0x22>
 8000dd2:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <_fflush_r+0x74>)
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	bf08      	it	eq
 8000dd8:	68ec      	ldreq	r4, [r5, #12]
 8000dda:	e7da      	b.n	8000d92 <_fflush_r+0x22>
 8000ddc:	08001410 	.word	0x08001410
 8000de0:	08001430 	.word	0x08001430
 8000de4:	080013f0 	.word	0x080013f0

08000de8 <std>:
 8000de8:	2300      	movs	r3, #0
 8000dea:	b510      	push	{r4, lr}
 8000dec:	4604      	mov	r4, r0
 8000dee:	e9c0 3300 	strd	r3, r3, [r0]
 8000df2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000df6:	6083      	str	r3, [r0, #8]
 8000df8:	8181      	strh	r1, [r0, #12]
 8000dfa:	6643      	str	r3, [r0, #100]	; 0x64
 8000dfc:	81c2      	strh	r2, [r0, #14]
 8000dfe:	6183      	str	r3, [r0, #24]
 8000e00:	4619      	mov	r1, r3
 8000e02:	2208      	movs	r2, #8
 8000e04:	305c      	adds	r0, #92	; 0x5c
 8000e06:	f7ff fdef 	bl	80009e8 <memset>
 8000e0a:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <std+0x38>)
 8000e0c:	6263      	str	r3, [r4, #36]	; 0x24
 8000e0e:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <std+0x3c>)
 8000e10:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e12:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <std+0x40>)
 8000e14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <std+0x44>)
 8000e18:	6224      	str	r4, [r4, #32]
 8000e1a:	6323      	str	r3, [r4, #48]	; 0x30
 8000e1c:	bd10      	pop	{r4, pc}
 8000e1e:	bf00      	nop
 8000e20:	08001211 	.word	0x08001211
 8000e24:	08001233 	.word	0x08001233
 8000e28:	0800126b 	.word	0x0800126b
 8000e2c:	0800128f 	.word	0x0800128f

08000e30 <_cleanup_r>:
 8000e30:	4901      	ldr	r1, [pc, #4]	; (8000e38 <_cleanup_r+0x8>)
 8000e32:	f000 b8af 	b.w	8000f94 <_fwalk_reent>
 8000e36:	bf00      	nop
 8000e38:	08000d71 	.word	0x08000d71

08000e3c <__sfmoreglue>:
 8000e3c:	b570      	push	{r4, r5, r6, lr}
 8000e3e:	1e4a      	subs	r2, r1, #1
 8000e40:	2568      	movs	r5, #104	; 0x68
 8000e42:	4355      	muls	r5, r2
 8000e44:	460e      	mov	r6, r1
 8000e46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e4a:	f000 f977 	bl	800113c <_malloc_r>
 8000e4e:	4604      	mov	r4, r0
 8000e50:	b140      	cbz	r0, 8000e64 <__sfmoreglue+0x28>
 8000e52:	2100      	movs	r1, #0
 8000e54:	e9c0 1600 	strd	r1, r6, [r0]
 8000e58:	300c      	adds	r0, #12
 8000e5a:	60a0      	str	r0, [r4, #8]
 8000e5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e60:	f7ff fdc2 	bl	80009e8 <memset>
 8000e64:	4620      	mov	r0, r4
 8000e66:	bd70      	pop	{r4, r5, r6, pc}

08000e68 <__sfp_lock_acquire>:
 8000e68:	4801      	ldr	r0, [pc, #4]	; (8000e70 <__sfp_lock_acquire+0x8>)
 8000e6a:	f000 b8b3 	b.w	8000fd4 <__retarget_lock_acquire_recursive>
 8000e6e:	bf00      	nop
 8000e70:	20000114 	.word	0x20000114

08000e74 <__sfp_lock_release>:
 8000e74:	4801      	ldr	r0, [pc, #4]	; (8000e7c <__sfp_lock_release+0x8>)
 8000e76:	f000 b8ae 	b.w	8000fd6 <__retarget_lock_release_recursive>
 8000e7a:	bf00      	nop
 8000e7c:	20000114 	.word	0x20000114

08000e80 <__sinit_lock_acquire>:
 8000e80:	4801      	ldr	r0, [pc, #4]	; (8000e88 <__sinit_lock_acquire+0x8>)
 8000e82:	f000 b8a7 	b.w	8000fd4 <__retarget_lock_acquire_recursive>
 8000e86:	bf00      	nop
 8000e88:	2000010f 	.word	0x2000010f

08000e8c <__sinit_lock_release>:
 8000e8c:	4801      	ldr	r0, [pc, #4]	; (8000e94 <__sinit_lock_release+0x8>)
 8000e8e:	f000 b8a2 	b.w	8000fd6 <__retarget_lock_release_recursive>
 8000e92:	bf00      	nop
 8000e94:	2000010f 	.word	0x2000010f

08000e98 <__sinit>:
 8000e98:	b510      	push	{r4, lr}
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	f7ff fff0 	bl	8000e80 <__sinit_lock_acquire>
 8000ea0:	69a3      	ldr	r3, [r4, #24]
 8000ea2:	b11b      	cbz	r3, 8000eac <__sinit+0x14>
 8000ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ea8:	f7ff bff0 	b.w	8000e8c <__sinit_lock_release>
 8000eac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000eb0:	6523      	str	r3, [r4, #80]	; 0x50
 8000eb2:	4b13      	ldr	r3, [pc, #76]	; (8000f00 <__sinit+0x68>)
 8000eb4:	4a13      	ldr	r2, [pc, #76]	; (8000f04 <__sinit+0x6c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8000eba:	42a3      	cmp	r3, r4
 8000ebc:	bf04      	itt	eq
 8000ebe:	2301      	moveq	r3, #1
 8000ec0:	61a3      	streq	r3, [r4, #24]
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	f000 f820 	bl	8000f08 <__sfp>
 8000ec8:	6060      	str	r0, [r4, #4]
 8000eca:	4620      	mov	r0, r4
 8000ecc:	f000 f81c 	bl	8000f08 <__sfp>
 8000ed0:	60a0      	str	r0, [r4, #8]
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f000 f818 	bl	8000f08 <__sfp>
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60e0      	str	r0, [r4, #12]
 8000edc:	2104      	movs	r1, #4
 8000ede:	6860      	ldr	r0, [r4, #4]
 8000ee0:	f7ff ff82 	bl	8000de8 <std>
 8000ee4:	68a0      	ldr	r0, [r4, #8]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2109      	movs	r1, #9
 8000eea:	f7ff ff7d 	bl	8000de8 <std>
 8000eee:	68e0      	ldr	r0, [r4, #12]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	2112      	movs	r1, #18
 8000ef4:	f7ff ff78 	bl	8000de8 <std>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	61a3      	str	r3, [r4, #24]
 8000efc:	e7d2      	b.n	8000ea4 <__sinit+0xc>
 8000efe:	bf00      	nop
 8000f00:	080013ec 	.word	0x080013ec
 8000f04:	08000e31 	.word	0x08000e31

08000f08 <__sfp>:
 8000f08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f0a:	4607      	mov	r7, r0
 8000f0c:	f7ff ffac 	bl	8000e68 <__sfp_lock_acquire>
 8000f10:	4b1e      	ldr	r3, [pc, #120]	; (8000f8c <__sfp+0x84>)
 8000f12:	681e      	ldr	r6, [r3, #0]
 8000f14:	69b3      	ldr	r3, [r6, #24]
 8000f16:	b913      	cbnz	r3, 8000f1e <__sfp+0x16>
 8000f18:	4630      	mov	r0, r6
 8000f1a:	f7ff ffbd 	bl	8000e98 <__sinit>
 8000f1e:	3648      	adds	r6, #72	; 0x48
 8000f20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	d503      	bpl.n	8000f30 <__sfp+0x28>
 8000f28:	6833      	ldr	r3, [r6, #0]
 8000f2a:	b30b      	cbz	r3, 8000f70 <__sfp+0x68>
 8000f2c:	6836      	ldr	r6, [r6, #0]
 8000f2e:	e7f7      	b.n	8000f20 <__sfp+0x18>
 8000f30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f34:	b9d5      	cbnz	r5, 8000f6c <__sfp+0x64>
 8000f36:	4b16      	ldr	r3, [pc, #88]	; (8000f90 <__sfp+0x88>)
 8000f38:	60e3      	str	r3, [r4, #12]
 8000f3a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f3e:	6665      	str	r5, [r4, #100]	; 0x64
 8000f40:	f000 f847 	bl	8000fd2 <__retarget_lock_init_recursive>
 8000f44:	f7ff ff96 	bl	8000e74 <__sfp_lock_release>
 8000f48:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f4c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f50:	6025      	str	r5, [r4, #0]
 8000f52:	61a5      	str	r5, [r4, #24]
 8000f54:	2208      	movs	r2, #8
 8000f56:	4629      	mov	r1, r5
 8000f58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f5c:	f7ff fd44 	bl	80009e8 <memset>
 8000f60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f68:	4620      	mov	r0, r4
 8000f6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f6c:	3468      	adds	r4, #104	; 0x68
 8000f6e:	e7d9      	b.n	8000f24 <__sfp+0x1c>
 8000f70:	2104      	movs	r1, #4
 8000f72:	4638      	mov	r0, r7
 8000f74:	f7ff ff62 	bl	8000e3c <__sfmoreglue>
 8000f78:	4604      	mov	r4, r0
 8000f7a:	6030      	str	r0, [r6, #0]
 8000f7c:	2800      	cmp	r0, #0
 8000f7e:	d1d5      	bne.n	8000f2c <__sfp+0x24>
 8000f80:	f7ff ff78 	bl	8000e74 <__sfp_lock_release>
 8000f84:	230c      	movs	r3, #12
 8000f86:	603b      	str	r3, [r7, #0]
 8000f88:	e7ee      	b.n	8000f68 <__sfp+0x60>
 8000f8a:	bf00      	nop
 8000f8c:	080013ec 	.word	0x080013ec
 8000f90:	ffff0001 	.word	0xffff0001

08000f94 <_fwalk_reent>:
 8000f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f98:	4606      	mov	r6, r0
 8000f9a:	4688      	mov	r8, r1
 8000f9c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000fa0:	2700      	movs	r7, #0
 8000fa2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fa6:	f1b9 0901 	subs.w	r9, r9, #1
 8000faa:	d505      	bpl.n	8000fb8 <_fwalk_reent+0x24>
 8000fac:	6824      	ldr	r4, [r4, #0]
 8000fae:	2c00      	cmp	r4, #0
 8000fb0:	d1f7      	bne.n	8000fa2 <_fwalk_reent+0xe>
 8000fb2:	4638      	mov	r0, r7
 8000fb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fb8:	89ab      	ldrh	r3, [r5, #12]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d907      	bls.n	8000fce <_fwalk_reent+0x3a>
 8000fbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	d003      	beq.n	8000fce <_fwalk_reent+0x3a>
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	4630      	mov	r0, r6
 8000fca:	47c0      	blx	r8
 8000fcc:	4307      	orrs	r7, r0
 8000fce:	3568      	adds	r5, #104	; 0x68
 8000fd0:	e7e9      	b.n	8000fa6 <_fwalk_reent+0x12>

08000fd2 <__retarget_lock_init_recursive>:
 8000fd2:	4770      	bx	lr

08000fd4 <__retarget_lock_acquire_recursive>:
 8000fd4:	4770      	bx	lr

08000fd6 <__retarget_lock_release_recursive>:
 8000fd6:	4770      	bx	lr

08000fd8 <__swhatbuf_r>:
 8000fd8:	b570      	push	{r4, r5, r6, lr}
 8000fda:	460e      	mov	r6, r1
 8000fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fe0:	2900      	cmp	r1, #0
 8000fe2:	b096      	sub	sp, #88	; 0x58
 8000fe4:	4614      	mov	r4, r2
 8000fe6:	461d      	mov	r5, r3
 8000fe8:	da07      	bge.n	8000ffa <__swhatbuf_r+0x22>
 8000fea:	2300      	movs	r3, #0
 8000fec:	602b      	str	r3, [r5, #0]
 8000fee:	89b3      	ldrh	r3, [r6, #12]
 8000ff0:	061a      	lsls	r2, r3, #24
 8000ff2:	d410      	bmi.n	8001016 <__swhatbuf_r+0x3e>
 8000ff4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff8:	e00e      	b.n	8001018 <__swhatbuf_r+0x40>
 8000ffa:	466a      	mov	r2, sp
 8000ffc:	f000 f96e 	bl	80012dc <_fstat_r>
 8001000:	2800      	cmp	r0, #0
 8001002:	dbf2      	blt.n	8000fea <__swhatbuf_r+0x12>
 8001004:	9a01      	ldr	r2, [sp, #4]
 8001006:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800100a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800100e:	425a      	negs	r2, r3
 8001010:	415a      	adcs	r2, r3
 8001012:	602a      	str	r2, [r5, #0]
 8001014:	e7ee      	b.n	8000ff4 <__swhatbuf_r+0x1c>
 8001016:	2340      	movs	r3, #64	; 0x40
 8001018:	2000      	movs	r0, #0
 800101a:	6023      	str	r3, [r4, #0]
 800101c:	b016      	add	sp, #88	; 0x58
 800101e:	bd70      	pop	{r4, r5, r6, pc}

08001020 <__smakebuf_r>:
 8001020:	898b      	ldrh	r3, [r1, #12]
 8001022:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001024:	079d      	lsls	r5, r3, #30
 8001026:	4606      	mov	r6, r0
 8001028:	460c      	mov	r4, r1
 800102a:	d507      	bpl.n	800103c <__smakebuf_r+0x1c>
 800102c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	6123      	str	r3, [r4, #16]
 8001034:	2301      	movs	r3, #1
 8001036:	6163      	str	r3, [r4, #20]
 8001038:	b002      	add	sp, #8
 800103a:	bd70      	pop	{r4, r5, r6, pc}
 800103c:	ab01      	add	r3, sp, #4
 800103e:	466a      	mov	r2, sp
 8001040:	f7ff ffca 	bl	8000fd8 <__swhatbuf_r>
 8001044:	9900      	ldr	r1, [sp, #0]
 8001046:	4605      	mov	r5, r0
 8001048:	4630      	mov	r0, r6
 800104a:	f000 f877 	bl	800113c <_malloc_r>
 800104e:	b948      	cbnz	r0, 8001064 <__smakebuf_r+0x44>
 8001050:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001054:	059a      	lsls	r2, r3, #22
 8001056:	d4ef      	bmi.n	8001038 <__smakebuf_r+0x18>
 8001058:	f023 0303 	bic.w	r3, r3, #3
 800105c:	f043 0302 	orr.w	r3, r3, #2
 8001060:	81a3      	strh	r3, [r4, #12]
 8001062:	e7e3      	b.n	800102c <__smakebuf_r+0xc>
 8001064:	4b0d      	ldr	r3, [pc, #52]	; (800109c <__smakebuf_r+0x7c>)
 8001066:	62b3      	str	r3, [r6, #40]	; 0x28
 8001068:	89a3      	ldrh	r3, [r4, #12]
 800106a:	6020      	str	r0, [r4, #0]
 800106c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001070:	81a3      	strh	r3, [r4, #12]
 8001072:	9b00      	ldr	r3, [sp, #0]
 8001074:	6163      	str	r3, [r4, #20]
 8001076:	9b01      	ldr	r3, [sp, #4]
 8001078:	6120      	str	r0, [r4, #16]
 800107a:	b15b      	cbz	r3, 8001094 <__smakebuf_r+0x74>
 800107c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001080:	4630      	mov	r0, r6
 8001082:	f000 f93d 	bl	8001300 <_isatty_r>
 8001086:	b128      	cbz	r0, 8001094 <__smakebuf_r+0x74>
 8001088:	89a3      	ldrh	r3, [r4, #12]
 800108a:	f023 0303 	bic.w	r3, r3, #3
 800108e:	f043 0301 	orr.w	r3, r3, #1
 8001092:	81a3      	strh	r3, [r4, #12]
 8001094:	89a0      	ldrh	r0, [r4, #12]
 8001096:	4305      	orrs	r5, r0
 8001098:	81a5      	strh	r5, [r4, #12]
 800109a:	e7cd      	b.n	8001038 <__smakebuf_r+0x18>
 800109c:	08000e31 	.word	0x08000e31

080010a0 <_free_r>:
 80010a0:	b538      	push	{r3, r4, r5, lr}
 80010a2:	4605      	mov	r5, r0
 80010a4:	2900      	cmp	r1, #0
 80010a6:	d045      	beq.n	8001134 <_free_r+0x94>
 80010a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80010ac:	1f0c      	subs	r4, r1, #4
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	bfb8      	it	lt
 80010b2:	18e4      	addlt	r4, r4, r3
 80010b4:	f000 f946 	bl	8001344 <__malloc_lock>
 80010b8:	4a1f      	ldr	r2, [pc, #124]	; (8001138 <_free_r+0x98>)
 80010ba:	6813      	ldr	r3, [r2, #0]
 80010bc:	4610      	mov	r0, r2
 80010be:	b933      	cbnz	r3, 80010ce <_free_r+0x2e>
 80010c0:	6063      	str	r3, [r4, #4]
 80010c2:	6014      	str	r4, [r2, #0]
 80010c4:	4628      	mov	r0, r5
 80010c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80010ca:	f000 b941 	b.w	8001350 <__malloc_unlock>
 80010ce:	42a3      	cmp	r3, r4
 80010d0:	d90b      	bls.n	80010ea <_free_r+0x4a>
 80010d2:	6821      	ldr	r1, [r4, #0]
 80010d4:	1862      	adds	r2, r4, r1
 80010d6:	4293      	cmp	r3, r2
 80010d8:	bf04      	itt	eq
 80010da:	681a      	ldreq	r2, [r3, #0]
 80010dc:	685b      	ldreq	r3, [r3, #4]
 80010de:	6063      	str	r3, [r4, #4]
 80010e0:	bf04      	itt	eq
 80010e2:	1852      	addeq	r2, r2, r1
 80010e4:	6022      	streq	r2, [r4, #0]
 80010e6:	6004      	str	r4, [r0, #0]
 80010e8:	e7ec      	b.n	80010c4 <_free_r+0x24>
 80010ea:	461a      	mov	r2, r3
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	b10b      	cbz	r3, 80010f4 <_free_r+0x54>
 80010f0:	42a3      	cmp	r3, r4
 80010f2:	d9fa      	bls.n	80010ea <_free_r+0x4a>
 80010f4:	6811      	ldr	r1, [r2, #0]
 80010f6:	1850      	adds	r0, r2, r1
 80010f8:	42a0      	cmp	r0, r4
 80010fa:	d10b      	bne.n	8001114 <_free_r+0x74>
 80010fc:	6820      	ldr	r0, [r4, #0]
 80010fe:	4401      	add	r1, r0
 8001100:	1850      	adds	r0, r2, r1
 8001102:	4283      	cmp	r3, r0
 8001104:	6011      	str	r1, [r2, #0]
 8001106:	d1dd      	bne.n	80010c4 <_free_r+0x24>
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	6053      	str	r3, [r2, #4]
 800110e:	4401      	add	r1, r0
 8001110:	6011      	str	r1, [r2, #0]
 8001112:	e7d7      	b.n	80010c4 <_free_r+0x24>
 8001114:	d902      	bls.n	800111c <_free_r+0x7c>
 8001116:	230c      	movs	r3, #12
 8001118:	602b      	str	r3, [r5, #0]
 800111a:	e7d3      	b.n	80010c4 <_free_r+0x24>
 800111c:	6820      	ldr	r0, [r4, #0]
 800111e:	1821      	adds	r1, r4, r0
 8001120:	428b      	cmp	r3, r1
 8001122:	bf04      	itt	eq
 8001124:	6819      	ldreq	r1, [r3, #0]
 8001126:	685b      	ldreq	r3, [r3, #4]
 8001128:	6063      	str	r3, [r4, #4]
 800112a:	bf04      	itt	eq
 800112c:	1809      	addeq	r1, r1, r0
 800112e:	6021      	streq	r1, [r4, #0]
 8001130:	6054      	str	r4, [r2, #4]
 8001132:	e7c7      	b.n	80010c4 <_free_r+0x24>
 8001134:	bd38      	pop	{r3, r4, r5, pc}
 8001136:	bf00      	nop
 8001138:	2000008c 	.word	0x2000008c

0800113c <_malloc_r>:
 800113c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800113e:	1ccd      	adds	r5, r1, #3
 8001140:	f025 0503 	bic.w	r5, r5, #3
 8001144:	3508      	adds	r5, #8
 8001146:	2d0c      	cmp	r5, #12
 8001148:	bf38      	it	cc
 800114a:	250c      	movcc	r5, #12
 800114c:	2d00      	cmp	r5, #0
 800114e:	4606      	mov	r6, r0
 8001150:	db01      	blt.n	8001156 <_malloc_r+0x1a>
 8001152:	42a9      	cmp	r1, r5
 8001154:	d903      	bls.n	800115e <_malloc_r+0x22>
 8001156:	230c      	movs	r3, #12
 8001158:	6033      	str	r3, [r6, #0]
 800115a:	2000      	movs	r0, #0
 800115c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800115e:	f000 f8f1 	bl	8001344 <__malloc_lock>
 8001162:	4921      	ldr	r1, [pc, #132]	; (80011e8 <_malloc_r+0xac>)
 8001164:	680a      	ldr	r2, [r1, #0]
 8001166:	4614      	mov	r4, r2
 8001168:	b99c      	cbnz	r4, 8001192 <_malloc_r+0x56>
 800116a:	4f20      	ldr	r7, [pc, #128]	; (80011ec <_malloc_r+0xb0>)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	b923      	cbnz	r3, 800117a <_malloc_r+0x3e>
 8001170:	4621      	mov	r1, r4
 8001172:	4630      	mov	r0, r6
 8001174:	f000 f83c 	bl	80011f0 <_sbrk_r>
 8001178:	6038      	str	r0, [r7, #0]
 800117a:	4629      	mov	r1, r5
 800117c:	4630      	mov	r0, r6
 800117e:	f000 f837 	bl	80011f0 <_sbrk_r>
 8001182:	1c43      	adds	r3, r0, #1
 8001184:	d123      	bne.n	80011ce <_malloc_r+0x92>
 8001186:	230c      	movs	r3, #12
 8001188:	6033      	str	r3, [r6, #0]
 800118a:	4630      	mov	r0, r6
 800118c:	f000 f8e0 	bl	8001350 <__malloc_unlock>
 8001190:	e7e3      	b.n	800115a <_malloc_r+0x1e>
 8001192:	6823      	ldr	r3, [r4, #0]
 8001194:	1b5b      	subs	r3, r3, r5
 8001196:	d417      	bmi.n	80011c8 <_malloc_r+0x8c>
 8001198:	2b0b      	cmp	r3, #11
 800119a:	d903      	bls.n	80011a4 <_malloc_r+0x68>
 800119c:	6023      	str	r3, [r4, #0]
 800119e:	441c      	add	r4, r3
 80011a0:	6025      	str	r5, [r4, #0]
 80011a2:	e004      	b.n	80011ae <_malloc_r+0x72>
 80011a4:	6863      	ldr	r3, [r4, #4]
 80011a6:	42a2      	cmp	r2, r4
 80011a8:	bf0c      	ite	eq
 80011aa:	600b      	streq	r3, [r1, #0]
 80011ac:	6053      	strne	r3, [r2, #4]
 80011ae:	4630      	mov	r0, r6
 80011b0:	f000 f8ce 	bl	8001350 <__malloc_unlock>
 80011b4:	f104 000b 	add.w	r0, r4, #11
 80011b8:	1d23      	adds	r3, r4, #4
 80011ba:	f020 0007 	bic.w	r0, r0, #7
 80011be:	1ac2      	subs	r2, r0, r3
 80011c0:	d0cc      	beq.n	800115c <_malloc_r+0x20>
 80011c2:	1a1b      	subs	r3, r3, r0
 80011c4:	50a3      	str	r3, [r4, r2]
 80011c6:	e7c9      	b.n	800115c <_malloc_r+0x20>
 80011c8:	4622      	mov	r2, r4
 80011ca:	6864      	ldr	r4, [r4, #4]
 80011cc:	e7cc      	b.n	8001168 <_malloc_r+0x2c>
 80011ce:	1cc4      	adds	r4, r0, #3
 80011d0:	f024 0403 	bic.w	r4, r4, #3
 80011d4:	42a0      	cmp	r0, r4
 80011d6:	d0e3      	beq.n	80011a0 <_malloc_r+0x64>
 80011d8:	1a21      	subs	r1, r4, r0
 80011da:	4630      	mov	r0, r6
 80011dc:	f000 f808 	bl	80011f0 <_sbrk_r>
 80011e0:	3001      	adds	r0, #1
 80011e2:	d1dd      	bne.n	80011a0 <_malloc_r+0x64>
 80011e4:	e7cf      	b.n	8001186 <_malloc_r+0x4a>
 80011e6:	bf00      	nop
 80011e8:	2000008c 	.word	0x2000008c
 80011ec:	20000090 	.word	0x20000090

080011f0 <_sbrk_r>:
 80011f0:	b538      	push	{r3, r4, r5, lr}
 80011f2:	4d06      	ldr	r5, [pc, #24]	; (800120c <_sbrk_r+0x1c>)
 80011f4:	2300      	movs	r3, #0
 80011f6:	4604      	mov	r4, r0
 80011f8:	4608      	mov	r0, r1
 80011fa:	602b      	str	r3, [r5, #0]
 80011fc:	f7ff fb6a 	bl	80008d4 <_sbrk>
 8001200:	1c43      	adds	r3, r0, #1
 8001202:	d102      	bne.n	800120a <_sbrk_r+0x1a>
 8001204:	682b      	ldr	r3, [r5, #0]
 8001206:	b103      	cbz	r3, 800120a <_sbrk_r+0x1a>
 8001208:	6023      	str	r3, [r4, #0]
 800120a:	bd38      	pop	{r3, r4, r5, pc}
 800120c:	20000118 	.word	0x20000118

08001210 <__sread>:
 8001210:	b510      	push	{r4, lr}
 8001212:	460c      	mov	r4, r1
 8001214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001218:	f000 f8a0 	bl	800135c <_read_r>
 800121c:	2800      	cmp	r0, #0
 800121e:	bfab      	itete	ge
 8001220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001222:	89a3      	ldrhlt	r3, [r4, #12]
 8001224:	181b      	addge	r3, r3, r0
 8001226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800122a:	bfac      	ite	ge
 800122c:	6563      	strge	r3, [r4, #84]	; 0x54
 800122e:	81a3      	strhlt	r3, [r4, #12]
 8001230:	bd10      	pop	{r4, pc}

08001232 <__swrite>:
 8001232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001236:	461f      	mov	r7, r3
 8001238:	898b      	ldrh	r3, [r1, #12]
 800123a:	05db      	lsls	r3, r3, #23
 800123c:	4605      	mov	r5, r0
 800123e:	460c      	mov	r4, r1
 8001240:	4616      	mov	r6, r2
 8001242:	d505      	bpl.n	8001250 <__swrite+0x1e>
 8001244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001248:	2302      	movs	r3, #2
 800124a:	2200      	movs	r2, #0
 800124c:	f000 f868 	bl	8001320 <_lseek_r>
 8001250:	89a3      	ldrh	r3, [r4, #12]
 8001252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800125a:	81a3      	strh	r3, [r4, #12]
 800125c:	4632      	mov	r2, r6
 800125e:	463b      	mov	r3, r7
 8001260:	4628      	mov	r0, r5
 8001262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001266:	f000 b817 	b.w	8001298 <_write_r>

0800126a <__sseek>:
 800126a:	b510      	push	{r4, lr}
 800126c:	460c      	mov	r4, r1
 800126e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001272:	f000 f855 	bl	8001320 <_lseek_r>
 8001276:	1c43      	adds	r3, r0, #1
 8001278:	89a3      	ldrh	r3, [r4, #12]
 800127a:	bf15      	itete	ne
 800127c:	6560      	strne	r0, [r4, #84]	; 0x54
 800127e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001286:	81a3      	strheq	r3, [r4, #12]
 8001288:	bf18      	it	ne
 800128a:	81a3      	strhne	r3, [r4, #12]
 800128c:	bd10      	pop	{r4, pc}

0800128e <__sclose>:
 800128e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001292:	f000 b813 	b.w	80012bc <_close_r>
	...

08001298 <_write_r>:
 8001298:	b538      	push	{r3, r4, r5, lr}
 800129a:	4d07      	ldr	r5, [pc, #28]	; (80012b8 <_write_r+0x20>)
 800129c:	4604      	mov	r4, r0
 800129e:	4608      	mov	r0, r1
 80012a0:	4611      	mov	r1, r2
 80012a2:	2200      	movs	r2, #0
 80012a4:	602a      	str	r2, [r5, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	f7ff fac7 	bl	800083a <_write>
 80012ac:	1c43      	adds	r3, r0, #1
 80012ae:	d102      	bne.n	80012b6 <_write_r+0x1e>
 80012b0:	682b      	ldr	r3, [r5, #0]
 80012b2:	b103      	cbz	r3, 80012b6 <_write_r+0x1e>
 80012b4:	6023      	str	r3, [r4, #0]
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
 80012b8:	20000118 	.word	0x20000118

080012bc <_close_r>:
 80012bc:	b538      	push	{r3, r4, r5, lr}
 80012be:	4d06      	ldr	r5, [pc, #24]	; (80012d8 <_close_r+0x1c>)
 80012c0:	2300      	movs	r3, #0
 80012c2:	4604      	mov	r4, r0
 80012c4:	4608      	mov	r0, r1
 80012c6:	602b      	str	r3, [r5, #0]
 80012c8:	f7ff fad3 	bl	8000872 <_close>
 80012cc:	1c43      	adds	r3, r0, #1
 80012ce:	d102      	bne.n	80012d6 <_close_r+0x1a>
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	b103      	cbz	r3, 80012d6 <_close_r+0x1a>
 80012d4:	6023      	str	r3, [r4, #0]
 80012d6:	bd38      	pop	{r3, r4, r5, pc}
 80012d8:	20000118 	.word	0x20000118

080012dc <_fstat_r>:
 80012dc:	b538      	push	{r3, r4, r5, lr}
 80012de:	4d07      	ldr	r5, [pc, #28]	; (80012fc <_fstat_r+0x20>)
 80012e0:	2300      	movs	r3, #0
 80012e2:	4604      	mov	r4, r0
 80012e4:	4608      	mov	r0, r1
 80012e6:	4611      	mov	r1, r2
 80012e8:	602b      	str	r3, [r5, #0]
 80012ea:	f7ff facd 	bl	8000888 <_fstat>
 80012ee:	1c43      	adds	r3, r0, #1
 80012f0:	d102      	bne.n	80012f8 <_fstat_r+0x1c>
 80012f2:	682b      	ldr	r3, [r5, #0]
 80012f4:	b103      	cbz	r3, 80012f8 <_fstat_r+0x1c>
 80012f6:	6023      	str	r3, [r4, #0]
 80012f8:	bd38      	pop	{r3, r4, r5, pc}
 80012fa:	bf00      	nop
 80012fc:	20000118 	.word	0x20000118

08001300 <_isatty_r>:
 8001300:	b538      	push	{r3, r4, r5, lr}
 8001302:	4d06      	ldr	r5, [pc, #24]	; (800131c <_isatty_r+0x1c>)
 8001304:	2300      	movs	r3, #0
 8001306:	4604      	mov	r4, r0
 8001308:	4608      	mov	r0, r1
 800130a:	602b      	str	r3, [r5, #0]
 800130c:	f7ff facb 	bl	80008a6 <_isatty>
 8001310:	1c43      	adds	r3, r0, #1
 8001312:	d102      	bne.n	800131a <_isatty_r+0x1a>
 8001314:	682b      	ldr	r3, [r5, #0]
 8001316:	b103      	cbz	r3, 800131a <_isatty_r+0x1a>
 8001318:	6023      	str	r3, [r4, #0]
 800131a:	bd38      	pop	{r3, r4, r5, pc}
 800131c:	20000118 	.word	0x20000118

08001320 <_lseek_r>:
 8001320:	b538      	push	{r3, r4, r5, lr}
 8001322:	4d07      	ldr	r5, [pc, #28]	; (8001340 <_lseek_r+0x20>)
 8001324:	4604      	mov	r4, r0
 8001326:	4608      	mov	r0, r1
 8001328:	4611      	mov	r1, r2
 800132a:	2200      	movs	r2, #0
 800132c:	602a      	str	r2, [r5, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	f7ff fac3 	bl	80008ba <_lseek>
 8001334:	1c43      	adds	r3, r0, #1
 8001336:	d102      	bne.n	800133e <_lseek_r+0x1e>
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	b103      	cbz	r3, 800133e <_lseek_r+0x1e>
 800133c:	6023      	str	r3, [r4, #0]
 800133e:	bd38      	pop	{r3, r4, r5, pc}
 8001340:	20000118 	.word	0x20000118

08001344 <__malloc_lock>:
 8001344:	4801      	ldr	r0, [pc, #4]	; (800134c <__malloc_lock+0x8>)
 8001346:	f7ff be45 	b.w	8000fd4 <__retarget_lock_acquire_recursive>
 800134a:	bf00      	nop
 800134c:	20000110 	.word	0x20000110

08001350 <__malloc_unlock>:
 8001350:	4801      	ldr	r0, [pc, #4]	; (8001358 <__malloc_unlock+0x8>)
 8001352:	f7ff be40 	b.w	8000fd6 <__retarget_lock_release_recursive>
 8001356:	bf00      	nop
 8001358:	20000110 	.word	0x20000110

0800135c <_read_r>:
 800135c:	b538      	push	{r3, r4, r5, lr}
 800135e:	4d07      	ldr	r5, [pc, #28]	; (800137c <_read_r+0x20>)
 8001360:	4604      	mov	r4, r0
 8001362:	4608      	mov	r0, r1
 8001364:	4611      	mov	r1, r2
 8001366:	2200      	movs	r2, #0
 8001368:	602a      	str	r2, [r5, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	f7ff fa48 	bl	8000800 <_read>
 8001370:	1c43      	adds	r3, r0, #1
 8001372:	d102      	bne.n	800137a <_read_r+0x1e>
 8001374:	682b      	ldr	r3, [r5, #0]
 8001376:	b103      	cbz	r3, 800137a <_read_r+0x1e>
 8001378:	6023      	str	r3, [r4, #0]
 800137a:	bd38      	pop	{r3, r4, r5, pc}
 800137c:	20000118 	.word	0x20000118

08001380 <_init>:
 8001380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001382:	bf00      	nop
 8001384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001386:	bc08      	pop	{r3}
 8001388:	469e      	mov	lr, r3
 800138a:	4770      	bx	lr

0800138c <_fini>:
 800138c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800138e:	bf00      	nop
 8001390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001392:	bc08      	pop	{r3}
 8001394:	469e      	mov	lr, r3
 8001396:	4770      	bx	lr
